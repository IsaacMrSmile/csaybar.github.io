# no relationship between objects in each view
p <- ggplot(txhousing, aes(month, median)) +
geom_line(aes(group = year), alpha = 0.3) +
geom_smooth() +
geom_line(aes(frame = year, ids = month), color = "red") +
facet_wrap(~ city)
p
ggplotly(p, width = 1200, height = 900) %>%
animation_opts(1000)
ggplotly(p, width = 1200, height = 900) %>%
animation_opts(100)
ggplotly(p, width = 1200, height = 900) %>%
animation_opts(1)
gg %>%
animation_opts(1000, easing = "elastic", redraw = FALSE)
gg
gg$animation$mode
gg$animation$mode
gg$animation$transition$easing
gg$animation$mode
gg$animation$frame$duration
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
plotly_build()
p <- peruprov_db_gther %>%
ggplot() +
geom_sf(aes(fill = rain, frame = month, text = text), lwd = 0.01) +
ggthemes::theme_map() +
theme(plot.title = element_text(size = 20, face = 'bold')) +
scale_fill_viridis_c(direction=1) +
ggtitle('Annual Rainfall Average in Peru')
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
plotly_build()
gg$animation$frame$duration
gg$x$frames <- lapply(
gg$x$frames, function(f) {
f$data <- lapply(f$data, function(d) d[!names(d) %in% c("x", "y")])
f
})
gg$animation$frame$duration
class(gg$animation$frame$duration)
gg$animation$frame$duration
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(1000, easing = "elastic", redraw = FALSE) %>%
plotly_build()
gg$animation$frame$duration
gg$x$frames <- lapply(
gg$x$frames, function(f) {
f$data <- lapply(f$data, function(d) d[!names(d) %in% c("x", "y")])
f
})
gg
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(1000,transition = 1000, easing = "elastic", redraw = FALSE) %>%
plotly_build()
gg$x$frames <- lapply(
gg$x$frames, function(f) {
f$data <- lapply(f$data, function(d) d[!names(d) %in% c("x", "y")])
f
})
gg
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(1000,transition = 1020, easing = "elastic", redraw = T) %>%
plotly_build()
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(2000,transition = 2000, easing = "elastic", redraw = T) %>%
plotly_build()
gg$x$frames <- lapply(
gg$x$frames, function(f) {
f$data <- lapply(f$data, function(d) d[!names(d) %in% c("x", "y")])
f
})
gg
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(2000,transition = 2000, easing = "elastic", redraw = T) %>%
plotly_build()
gg
gg$animation$transition$duration
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(2000,transition = 2000, easing = "elastic", redraw = T)
gg
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(2000, easing = "elastic
ggplotly(gg)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(2000, easing = "elastic")
ggplotly(gg)
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(2000, easing = "linear") %>%
plotly_build()
ggplotly(gg)
data(gapminder, package = "gapminder")
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplotly(gg)
ggplotly(gg)+animation_slider(hide=T)
ggplotly(gg) %>% animation_slider(hide=T)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=1000)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=3000)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=10000)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=100)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=100,transition = 10)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=100,transition = 1)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=1000,transition = 1)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=10000,transition = 1)
ggplotly(gg) %>% animation_slider(hide=T) %>%
animation_opts(frame=1000000,transition = 1)
ggplotly(gg) %>%
animation_opts(frame=1000000,transition = 1)
ggplotly(gg) %>%
animation_opts(frame=1000,transition = 1)
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
animation_opts(2000, easing = "linear") %>%
plotly_build()
data(gapminder, package = "gapminder")
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
kk<-ggplotly(gg)
kk1<-ggplotly(gg) %>% ggplot_build()
kk1<-gg %>% ggplot_build()
kk1$
data(gapminder, package = "gapminder")
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplotly(gg) %>%
animation_opts(frame=1000,transition = 1)
kk<-ggplotly(gg)
kk1<-gg %>% plotly_build()
kk1$animation
kk1
kk1$animation$frame$duration = 1000
kk1$animation$transition$duration = 1
kk1
ggplotly(gg) %>%
animation_opts(frame=1000,transition = 1)
kk1<-gg %>% plotly_build()
kk1
ggplotly(kk1) %>%
animation_opts(frame=1000,transition = 1)
gg %>%
animation_opts(frame=1000,transition = 1) %>%
plotly_build()
gg %>%
animation_opts(frame=1000,transition = 1) %>%
plotly_build(registerFrames = F)
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
plotly_build()
gg$x$frames <- lapply(
gg$x$frames, function(f) {
f$data <- lapply(f$data, function(d) d[!names(d) %in% c("x", "y")])
f
})
ggplotly(gg)
library(shiny)
library(leaflet)
library(plotly)
library(rgdal)
# devtools::install_github("ropensci/geojsonio")
library(geojsonio)
# devtools::install_github("ateucher/rmapshaper")
library(rmapshaper)
library(shiny)
library(leaflet)
library(plotly)
library(rgdal)
# devtools::install_github("ropensci/geojsonio")
library(geojsonio)
# devtools::install_github("ateucher/rmapshaper")
library(rmapshaper)
library(shiny)
library(leaflet)
library(plotly)
library(rgdal)
# devtools::install_github("ropensci/geojsonio")
library(geojsonio)
# devtools::install_github("ateucher/rmapshaper")
devtools::install_github("ateucher/rmapshaper")
library(shiny)
library(leaflet)
library(plotly)
library(rgdal)
# devtools::install_github("ropensci/geojsonio")
library(geojsonio)
# devtools::install_github("ateucher/rmapshaper")
library(rmapshaper)
if (!file.exists('tarrxy.geojson')) {
download.file(
'https://gist.githubusercontent.com/walkerke/da941dac84f730adcdde/raw/c65cd4886c10df032c0d3fdf1e430d583fa8c15a/tarrxy.geojson',
'tarrxy.geojson'
)
}
tarrxy <- geojson_read('tarrxy.geojson', what = 'sp')
ui <- fluidPage(
titlePanel("Linked brushing with Plotly and Leaflet in Shiny"),
fixedRow(
column(width = 6,
plotlyOutput('scatter'))
),
fixedRow(
column(width = 6,
leafletOutput('map'))
)
)
server <- function(input, output, session) {
output$scatter <- renderPlotly({
g <- ggplot(tarrxy@data, aes(x = pctwhite, y = pctrep)) +
geom_point() +
xlab('Percent non-Hispanic white, 2010') +
ylab('Percent voting Republican, 2012')
ggplotly(g, source = 'source') %>% layout(dragmode = 'lasso')
})
selected_precincts <- reactive({
eventdata <- event_data('plotly_selected', source = 'source')
precincts <- as.numeric(eventdata[['pointNumber']])
sub <- tarrxy[tarrxy$id %in% precincts, ]
return(sub)
})
output$map <- renderLeaflet({
tarrant_map <- leaflet() %>%
addProviderTiles('CartoDB.DarkMatter') %>%
addPolygons(data = tarrxy, weight = 1, smoothFactor = 0.2,
color = 'white', fillColor = 'grey') %>%
addPolygons(data = selected_precincts(), fill = FALSE, color = '#FFFF00',
opacity = 1)
tarrant_map
})
}
shinyApp(ui = ui, server = server)
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
plotly_build()
p <- peruprov_db_gther %>%
ggplot() +
geom_sf(aes(fill = rain, frame = month, text = text), lwd = 0.01) +
ggthemes::theme_map() +
theme(plot.title = element_text(size = 20, face = 'bold')) +
scale_fill_viridis_c(direction=1) +
ggtitle('Annual Rainfall Average in Peru')
p
p <- peruprov_db_gther %>%
ggplot() +
geom_sf(aes(fill = rain, frame = month, text = text), lwd = 0.01) +
ggthemes::theme_map() +
theme(plot.title = element_text(size = 20, face = 'bold')) +
scale_fill_viridis_c(direction=1) +
ggtitle('Annual Rainfall Average in Peru')
peruprov_db_gther
peruprov_db_gther
peruprov_db_gther
library(sf)
library(sf)
rm(sf)
p <- peruprov_db_gther %>%
ggplot() +
geom_sf(aes(fill = rain, frame = month, text = text), lwd = 0.01) +
ggthemes::theme_map() +
theme(plot.title = element_text(size = 20, face = 'bold')) +
scale_fill_viridis_c(direction=1) +
ggtitle('Annual Rainfall Average in Peru')
gg
gg$x$frames <- lapply(
gg$x$frames, function(f) {
f$data <- lapply(f$data, function(d) d[!names(d) %in% c("x", "y")])
f
})
ggplotly(gg)
## Second plotly
peruprov_db_gther <- peruprov_db %>%
gather(month,rain,-provname,-depname,-geometry) %>%
mutate(text = paste("Province of <b>",
provname,
'-',
depname))  %>%
select(month,rain,text)
month_num <- match(peruprov_db_gther$month,month.abb)
peruprov_db_gther$month <- sprintf('%02d <br> %s',month_num,peruprov_db_gther$month)
p <- peruprov_db_gther %>%
ggplot() +
geom_sf(aes(fill = rain, frame = month, text = text), lwd = 0.01) +
ggthemes::theme_map() +
theme(plot.title = element_text(size = 20, face = 'bold')) +
scale_fill_viridis_c(direction=1) +
ggtitle('Annual Rainfall Average in Peru')
#plotly_json(p)
gg <- p %>%
style(hoveron = "fill") %>%
plotly_build()
gg$x$frames <- lapply(
gg$x$frames, function(f) {
f$data <- lapply(f$data, function(d) d[!names(d) %in% c("x", "y")])
f
})
ggplotly(gg)
library(blogdown)
rm(list = ls())
gc()
setwd('/home/aybarpc01/Github/csaybar.github.io/')
blogdown::serve_site()
knitr::include_graphics("img/fun.jpg")
library(blogdown)
blogdown::build_site()
library(sf)
blogdown::build_site()
library(reticulate)
library(kableExtra)
if (!dir.exists('cachepath')) {
dir.create('cachepath/')
}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,warning = F,message = F,cache.path = 'cachepath/')
use_python("/usr/bin/python3")
blogdown::build_site()
blogdown::build_site()
library(reticulate)
library(kableExtra)
1
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,warning = F,message = F)
use_python("/usr/bin/python3")
py$a
blogdown::build_site()
blogdown::serve_site()
py$load_dataset
blogdown::build_site()
library(blogdown)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(reticulate)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,warning = F,message = F)
use_python("/usr/bin/python3")
original_par <-par() #original par
par(col.axis="white",col.lab="white",tck=0)
plotRGB(image,axes = TRUE, main = message)
library(raster)
original_par <-par() #original par
par(col.axis="white",col.lab="white",tck=0)
plotRGB(image,axes = TRUE, main = message)
box(col="white")
par(original_par)
plotRGB(image,axes = TRUE, main = message)
blogdown::serve_site()
library(blogdown)
serve_site()
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,message = FALSE,warning = FALSE)
library(rnaturalearth)
library(classInt)
library(stringr)
library(viridisLite)
library(tidyverse)
library(sf)
library(smoothr)
library(plotly)
geom <- st_read(system.file("shape/nc.shp", package="sf"))
ggplot(geom) +
geom_sf(aes(fill = AREA))+
ggtitle('My first choropleth map') %>%
ggplot(geom) +
geom_sf(aes(fill = AREA))+
ggtitle('My first choropleth map') %>%
ggplotly()
ggplot(geom) +
geom_sf(aes(fill = AREA))+
ggtitle('My first choropleth map') %>%
ggplotly(.)
p <- ggplot(geom) +
geom_sf(aes(fill = AREA))+
ggtitle('My first choropleth map')
ggplotly(p)
serve_site()
serve_site()
build_site()
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
plot_ly() %>% add_sf(data = nc)
plot_ly() %>% add_polygons(data = nc)
plot_ly() %>% add_polygons(nc)
nc
plot_ly() %>% add_sf(nc)
plot_ly() %>% add_sf(data = nc)
st_centroid(nc)
plot(st_centroid(nc))
plot_ly() %>% add_sf(data = nc) %>%
st_centroid(nc)
plot_ly() %>% add_sf(data = nc) %>%
add_sf(st_centroid(nc)  )
plot_ly() %>% add_sf(data = nc) %>%
add_sf(data = st_centroid(nc))
plot_ly(type = 'scattermapbox')
plot_ly(type = 'scattermapbox') %>%
add_sf(data = st_centroid(nc))
plot_ly(type = 'mapbox') %>%
add_sf(data = st_centroid(nc))
help(plotly::plot_geo())
?plotly::plot_geo()
show(plotly::plot_geo())
library(blogdown)
blogdown::serve_site()
trace <- list(x = 1, y = 1)
obj <- list(data = list(trace), layout = list(title = "my plot"))
as_widget(obj)
library(plotly)
trace <- list(x = 1, y = 1)
obj <- list(data = list(trace), layout = list(title = "my plot"))
as_widget(obj)
library(blogdown)
blogdown::serve_site()
geom <- st_read(system.file("shape/nc.shp", package="sf"),quiet = TRUE)
p <- ggplot(geom) +
geom_sf(aes(fill = AREA))+
ggtitle('My first choropleth map')
ggplotly(p)
library(blogdown)
library(sf)
library(plotly)
geom <- st_read(system.file("shape/nc.shp", package="sf"),quiet = TRUE)
p <- ggplot(geom) +
geom_sf(aes(fill = AREA))+
ggtitle('My first choropleth map')
ggplotly(p)
plot_ly(geom)
plot_ly(geom,fill = ~AREA)
plot_ly(geom,fill = ~AREA,type='scattergeo')
plot_ly(geom,fill = ~AREA)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,message = FALSE,warning = FALSE)
library(rnaturalearth)
library(classInt)
library(stringr)
library(viridisLite)
library(tidyverse)
library(sf)
library(smoothr)
library(plotly)
intervals <- classIntervals(worldmap_pop$pop,style = 'kmeans',n = 10)$brks
worldmap_pop <- worldmap %>%
select('POP_EST', 'NAME') %>%  # country population
'colnames<-'(c('pop','name','geometry')) %>%
mutate(pop = round(as.numeric(pop)/1000000,2)) %>%
arrange(pop)
worldmap <- ne_download(scale = 110,
type = "countries",
category = "cultural",
destdir = tempdir(),
load = TRUE,
returnclass = "sf")
worldmap_pop <- worldmap %>%
select('POP_EST', 'NAME') %>%  # country population
'colnames<-'(c('pop','name','geometry')) %>%
mutate(pop = round(as.numeric(pop)/1000000,2)) %>%
arrange(pop)
# Filling polygons with holes. (Sud-Africa case)
sudafrica <- worldmap_pop[153,] %>%
fill_holes(10^12) %>%
st_cast('MULTIPOLYGON')
worldmap_pop[153,] = sudafrica
intervals <- classIntervals(worldmap_pop$pop,style = 'kmeans',n = 10)$brks
intervals
intervals <- classIntervals(worldmap_pop$pop,style = 'kmeans',n = 10)$brks
intervals_f <-cut(worldmap_pop$pop,intervals)
intervals_f <- factor(intervals_f,rev(levels(intervals_f)))
lvls <- levels(intervals_f) %>%
str_replace_all("\\(|\\]","") %>%
str_replace_all(","," - ")
lvls[c(1,length(lvls))] <- c('804 >', '< 4.08')
levels(intervals_f) <- lvls
worldmap_pop$interval <- intervals_f
text <- sprintf('Country: %s \nPopulation: %.2f',worldmap_pop$name,worldmap_pop$pop)
worldmap_pop$text =text
library(blogdown)
blogdown::serve_site()
